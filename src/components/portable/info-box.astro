---
import { PortableText } from 'astro-portabletext';

type PortableContent = {
  _type: string;
} & Record<string, unknown>[];

type Props = {
  node: { variant: 'info' | 'warning'; content: PortableContent };
};

const { node } = Astro.props;

const variant = node.variant;
const contentBlocks = node.content;
const isWarning = variant === 'warning';
---

<div
  class={isWarning
    ? 'rounded-md border border-amber-500/50'
    : 'rounded-md border border-sky-500/40'}
>
  <div class="flex items-start gap-3">
    {
      isWarning ? (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="currentColor"
          class="h-5 w-5 text-amber-400"
        >
          <path
            fill-rule="evenodd"
            d="M11.47 3.84a1.5 1.5 0 0 1 2.58 0l8.26 14.3A1.5 1.5 0 0 1 21.01 21H2.99a1.5 1.5 0 0 1-1.3-2.86l8.26-14.3ZM12 8.25a.75.75 0 0 0-.75.75v4.5a.75.75 0 0 0 1.5 0V9a.75.75 0 0 0-.75-.75Zm0 8.25a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Z"
            clip-rule="evenodd"
          />
        </svg>
      ) : (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="currentColor"
          class="h-5 w-5 text-sky-400"
        >
          <path
            fill-rule="evenodd"
            d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12Zm9.75-4.5a.75.75 0 0 0-.75.75v5.25c0 .414.336.75.75.75h3a.75.75 0 0 0 0-1.5H13.5V8.25a.75.75 0 0 0-.75-.75Z"
            clip-rule="evenodd"
          />
        </svg>
      )
    }
    <div>
      <PortableText value={contentBlocks} />
    </div>
  </div>
</div>
