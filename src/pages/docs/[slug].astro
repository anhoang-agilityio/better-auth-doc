---
import type { MetadataType as Metadata } from '@/components/utils/metadata';
import { getAdjacentArticles } from '@/features/article/api/get-adjacent-articles';
import { getAllArticleSlugs } from '@/features/article/api/get-all-article-slugs';
import { getArticleBySlug } from '@/features/article/api/get-article-by-slug';
import Article from '@/features/article/components/article.astro';
import NavigationCard from '@/features/article/components/navigation-card.astro';
import { TocDesktop } from '@/features/article/components/toc/toc-desktop';
import { TocMobile } from '@/features/article/components/toc/toc-mobile';
import { extractTocFromPortableText } from '@/features/article/utils/toc';
import DocsLayout from '@/layouts/docs/index.astro';

export async function getStaticPaths() {
  const slugs = await getAllArticleSlugs();
  return slugs.map((item) => ({ params: { slug: item.slug } }));
}

const { slug } = Astro.params;

if (!slug) {
  return Astro.redirect('/404');
}

const article = await getArticleBySlug(slug);

if (!article) {
  return Astro.redirect('/404');
}

const adjacentArticles = await getAdjacentArticles(slug);
const tocItems = extractTocFromPortableText(article.content);

const metadata: Metadata = {
  title: article.title,
  description: article.description,
};
---

<DocsLayout metadata={metadata}>
  <Fragment slot="article">
    <div class="flex gap-8">
      <div class="min-w-0 flex-1">
        <Article article={article} />
        {
          (adjacentArticles.previous || adjacentArticles.next) && (
            <div class="@container mt-16 grid grid-cols-2 gap-4">
              <div>
                {adjacentArticles.previous && (
                  <NavigationCard
                    article={adjacentArticles.previous}
                    direction="previous"
                  />
                )}
              </div>
              <div>
                {adjacentArticles.next && (
                  <NavigationCard
                    article={adjacentArticles.next}
                    direction="next"
                  />
                )}
              </div>
            </div>
          )
        }
      </div>
    </div>
  </Fragment>
  <Fragment slot="toc-desktop">
    <TocDesktop client:visible items={tocItems} />
  </Fragment>
  <Fragment slot="toc-mobile">
    <TocMobile client:visible items={tocItems} />
  </Fragment>
</DocsLayout>
